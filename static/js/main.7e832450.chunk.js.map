{"version":3,"sources":["components/Header/Header.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/Footer/Filter/Filter.tsx","components/Footer/Footer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","props","useState","title","setTitle","className","value","onChange","e","target","type","placeholder","onKeyPress","key","onAdd","TodoItem","todo","onDelete","changeCompleted","completed","checked","id","onClick","TodoList","todos","htmlFor","map","idx","toString","Filter","setFilter","filters","href","all","active","to","Footer","leftTodos","filter","setTodos","length","App","isFooterVisible","setIsFooterVisible","filteredTodos","filteredByStatus","useEffect","saveTodos","localStorage","getItem","JSON","parse","setItem","stringify","useMemo","t","console","log","newTodo","Date","now","some","prev","newTodos","newTodoList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e832450.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {ITodo} from '../../interfaces';\r\nimport {strict} from \"assert\";\r\n\r\ninterface TodoHeaderProps {\r\n    // onAdd(title: string, newTodo: ITodo): void\r\n    onAdd: (title: string) => void;\r\n    setTodos: (todos: ITodo[]) => void;\r\n}\r\n\r\nexport const Header: React.FC<TodoHeaderProps> = (props) => {\r\n    const [title, setTitle] = useState<string>('');\r\n\r\n    const changeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.target.value);\r\n    };\r\n\r\n    const keyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            props.onAdd(title);\r\n            setTitle('');\r\n        }\r\n    };\r\n\r\n    // const addNewTodo = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    //     e.preventDefault();\r\n    //\r\n    //     const newTodo: ITodo = {\r\n    //         id: Date.now(),\r\n    //         title,\r\n    //         completed: false,\r\n    //     };\r\n\r\n    // onAdd(newTodo);\r\n        // setTitle('');\r\n    // };\r\n\r\n    return (\r\n        <header className=\"header\">\r\n            <h1>todos</h1>\r\n\r\n            <form>\r\n                <input\r\n                    value={title}\r\n                    onChange={changeHandler}\r\n                    type=\"text\"\r\n                    className=\"new-todo\"\r\n                    placeholder=\"What needs to be done?\"\r\n                    onKeyPress={keyPressHandler}\r\n                />\r\n            </form>\r\n        </header>\r\n    );\r\n};\r\n","import React, {useState} from \"react\";\r\nimport {ITodo} from \"../../interfaces\";\r\n\r\ntype TodoItemProps = {\r\n    idx: string;\r\n    todo: ITodo;\r\n    // classes: string[];\r\n    onDelete: (id: number) => void\r\n    // void = no return value\r\n    // ?... optional param (not required)\r\n    changeCompleted: (id: number) => void;\r\n}\r\n\r\nexport const TodoItem: React.FC<TodoItemProps> = ({ todo, onDelete, changeCompleted}) => {\r\n    return (\r\n        <li key={todo.id} className={todo.completed ? 'completed' : ''}>\r\n            <div className=\"view\">\r\n                <input\r\n                    // onChange={}\r\n                    type=\"checkbox\"\r\n                    className=\"toggle\"\r\n                    checked={todo.completed}\r\n                    onChange={() => changeCompleted(todo.id)}\r\n                />\r\n                <label>{todo.title}</label>\r\n                <button\r\n                    onClick={() => onDelete(todo.id)}\r\n                    // onChange={() => changeCompleted}\r\n                    type=\"button\"\r\n                    className=\"destroy\"\r\n                />\r\n            </div>\r\n            <input type=\"text\" className=\"edit\"/>\r\n        </li>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {ITodo} from '../../interfaces';\r\nimport {TodoItem} from '../TodoItem/TodoItem';\r\n\r\ntype TodoListProps = {\r\n    todos: ITodo[];\r\n    onDelete: (id: number) => void;\r\n    changeCompleted: (id: number) => void;\r\n}\r\n\r\nexport const TodoList: React.FC<TodoListProps> = ({onDelete, todos, changeCompleted}) => {\r\n    return (\r\n        <section className=\"main\">\r\n            <input type=\"checkbox\" id=\"toggle-all\" className=\"toggle-all\" />\r\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\r\n\r\n            <ul className=\"todo-list\">\r\n                {todos && todos.map((todo, idx) => {\r\n                    return (\r\n                        <TodoItem\r\n                            idx={idx.toString()}\r\n                            key={todo.id}\r\n                            todo={todo}\r\n                            onDelete={onDelete}\r\n                            changeCompleted={changeCompleted}\r\n                        />\r\n                    )\r\n                })}\r\n            </ul>\r\n\r\n        </section>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\ntype FilterProps = {\r\n    setFilter: (filter: string) => void;\r\n    // filters: {all: string, active: string, completed: string};\r\n    filters: {[key: string]: string};\r\n    filter: string;\r\n}\r\n\r\nexport const Filter: React.FC<FilterProps> = ({setFilter, filters}) => {\r\n    return (\r\n        <ul className=\"filters\">\r\n            <li>\r\n                <a\r\n                    href=\"/\"\r\n                    // className={todo.completed ? 'basic selected' : 'basic'}\r\n                    onClick={() => setFilter(filters.all)}\r\n                >\r\n                    All\r\n                </a>\r\n            </li>\r\n\r\n            <li>\r\n                <a\r\n                    href=\"/active\"\r\n                    className=\"basic\"\r\n                    onClick={() => setFilter(filters.active)}\r\n                >\r\n                    Active\r\n                </a>\r\n            </li>\r\n\r\n            <NavLink\r\n                to=\"/completed\"\r\n                className=\"basic\"\r\n                onClick={() => setFilter(filters.completed)}\r\n            >\r\n                Completed\r\n            </NavLink>\r\n        </ul>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport {Filter} from \"./Filter/Filter\";\r\nimport {ITodo} from \"../../interfaces\";\r\n\r\ntype FooterType = {\r\n    leftTodos: ITodo[];\r\n    filter: string;\r\n    setFilter: (filter: string) => void;\r\n    filters: any;\r\n    setTodos: (todos: ITodo[]) => void;\r\n}\r\n\r\nexport const Footer: React.FC<FooterType> = ({leftTodos, filter, setFilter, filters, setTodos}) => {\r\n    return (\r\n        <footer className=\"footer\">\r\n            <span className=\"todo-count\">\r\n                {leftTodos.length}\r\n                {leftTodos.length > 1 || leftTodos.length === 0\r\n                    ? ' todos left'\r\n                    : ' todo left'\r\n                }\r\n            </span>\r\n\r\n            <Filter\r\n                filter={filter}\r\n                setFilter={setFilter}\r\n                filters={filters}\r\n            />\r\n\r\n            <button\r\n                onClick={() => setTodos(leftTodos)}\r\n                type=\"button\"\r\n                className=\"clear-completed\"\r\n            >\r\n                Clear completed\r\n            </button>\r\n        </footer>\r\n    );\r\n};\r\n","import React, {useState, useEffect, useMemo} from 'react';\nimport './App.css';\nimport {Header} from \"./components/Header/Header\";\nimport {TodoList} from \"./components/TodoList/TodoList\";\nimport {Footer} from \"./components/Footer/Footer\";\n\ninterface ITodo {\n    title: string,\n    id: number,\n    completed: boolean,\n}\n\n// rework to 'ENUM'\nconst filters = {\n    all: 'all',\n    active: 'active',\n    completed: 'completed',\n};\n\nexport const App: React.FC = () => {\n    const [todos, setTodos] = useState<ITodo[]>([]);\n    // TUPLE - useState return Tulip of the 2 elements (1 - variable, 2 - func for update variable)\n    const [isFooterVisible, setIsFooterVisible] = useState<boolean>(false);\n    const [filter, setFilter] = useState<string>(filters.all);\n\n    const filteredByStatus = () => {\n        switch (filter) {\n            case filters.active:\n                return todos.filter(todo => !todo.completed);\n            case filters.completed:\n                return todos.filter(todo => todo.completed);\n            default:\n                return todos;\n        }\n    };\n\n    const filteredTodos = filteredByStatus();\n\n    useEffect(() => {\n        const saveTodos = localStorage.getItem('todos');\n\n        if (saveTodos) {\n            setTodos(JSON.parse(saveTodos));\n        }\n    }, []);\n\n    useEffect(() => {\n        localStorage.setItem('todos', JSON.stringify(todos));\n\n        if (todos.length > 0) {\n            setIsFooterVisible(true);\n        } else {\n            setIsFooterVisible(false);\n        }\n\n        setIsFooterVisible(todos.length > 0);\n    }, [todos]);\n\n    //void - no return value\n    const addHandler = (title: string): void => {\n        console.log('adddd');\n\n        const newTodo: ITodo = {\n            id: Date.now(),\n            title,\n            completed: false,\n        };\n\n        if (todos.some(todo => (todo.title === newTodo.title))) {\n            return;\n        }\n\n        if (newTodo.title) {\n            setTodos(prev => [newTodo, ...prev]);\n        }\n    };\n\n    const deleteTodo = (id: number) => {\n        const newTodos = [...todos].filter(todo => todo.id !== id);\n\n        setTodos(newTodos);\n    };\n\n    const changeCompleted = (id: number) => {\n        const newTodoList = [...todos].map((todo) => {\n            if (todo.id === id) {\n                return {\n                    ...todo,\n                    completed: !todo.completed,\n                };\n            }\n\n            return todo;\n        });\n\n        setTodos(newTodoList);\n    };\n\n    const leftTodos = useMemo(() => {\n        return [...todos].filter(t => !t.completed);\n    }, [todos]);\n\n    return (\n        <section className=\"todoapp\">\n\n            <Header\n                setTodos={setTodos}\n                onAdd={addHandler}\n            />\n\n            <TodoList\n                onDelete={deleteTodo}\n                todos={filteredTodos}\n                changeCompleted={changeCompleted}\n            />\n\n            {isFooterVisible && (\n                <Footer\n                    leftTodos={leftTodos}\n                    filter={filter}\n                    setFilter={setFilter}\n                    filters={filters}\n                    setTodos={setTodos}\n                />\n            )}\n\n        </section>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <React.StrictMode>\n            <App/>\n        </React.StrictMode>,\n    </BrowserRouter>,\ndocument.getElementById('root')\n)\n;\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}